"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var kinvey_nativescript_sdk_1 = require("kinvey-nativescript-sdk");
var rxjs_1 = require("rxjs");
var care_plan_activity_model_1 = require("./care-plan-activity.model");
var care_plan_event_model_1 = require("./care-plan-event.model");
var CareCardEventService = /** @class */ (function () {
    function CareCardEventService() {
        this._eventsDataStore = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection("Event");
        this._events = new Array();
        // Observable events source
        this._updatedEventItemSource = new rxjs_1.BehaviorSubject(null);
        // Observable events stream
        this.updatedEvent$ = this._updatedEventItemSource.asObservable();
    }
    CareCardEventService.prototype.upsertEvent = function (event, eventsCount) {
        var _this = this;
        return this.findEvents(event.activity.title, event.date)
            .then(function (registeredEvents) {
            var promiseQueue = Promise.resolve();
            if (registeredEvents.length === eventsCount) {
                var eventToUpdate = registeredEvents.find(function (currentEvent) {
                    return currentEvent.occurrenceIndexOfDay === event.occurrenceIndexOfDay;
                });
                eventToUpdate = event;
            }
            else {
                _this._events.push(event);
                promiseQueue = promiseQueue.then(function () { return _this.saveEvent(event); });
            }
            return promiseQueue;
        })
            .then(function () { return _this._updatedEventItemSource.next(event); });
    };
    CareCardEventService.prototype.findEvents = function (title, date) {
        var _this = this;
        return this.getEvents()
            .then(function () {
            var filteredEvents = _this._events.filter(function (currentEvent) {
                return currentEvent.date.toDateString() === date.toDateString() &&
                    currentEvent.activity.title === title;
            });
            return filteredEvents;
        });
    };
    CareCardEventService.prototype.getEvents = function () {
        var _this = this;
        if (!this._eventsPromise) {
            this._eventsPromise = this._eventsDataStore.find().toPromise()
                .then(function (data) {
                var events = [];
                if (data && data.length) {
                    data.forEach(function (eventData) {
                        var activity = new care_plan_activity_model_1.CarePlanActivity(eventData.activity);
                        var jsonDate = eventData.date;
                        var date = new Date(jsonDate.year, jsonDate.month - 1, jsonDate.day);
                        var occurrenceIndexOfDay = eventData.occurrenceIndexOfDay;
                        var result = eventData.result;
                        var value = result && result.values && result.values.length ? result.values[0] : 1;
                        var event = new care_plan_event_model_1.CarePlanEvent(activity, date, occurrenceIndexOfDay, value);
                        events.push(event);
                    });
                }
                _this._events = events;
                return events;
            })
                .catch(function (error) {
                alert({
                    title: "Oops something went wrong.",
                    message: error.message,
                    okButtonText: "Ok"
                });
            });
        }
        return this._eventsPromise;
    };
    CareCardEventService.prototype.saveEvent = function (event) {
        var eventObject = {
            activity: event.activity.getJson(),
            date: {
                year: event.date.getUTCFullYear(),
                month: event.date.getUTCMonth() + 1,
                era: 1,
                day: event.date.getUTCDate()
            },
            numberOfDaysSinceStart: event.activity.getNumberOfDaysSinceStart(),
            occurrenceIndexOfDay: event.occurrenceIndexOfDay,
            state: 2 /* Completed */
        };
        if (event.activity.type === 1 /* Assessment */) {
            var result = {
                creationDate: new Date(),
                values: [event.value],
                valueString: event.value.toString()
            };
            if (event.activity.title === "Weight") {
                result.unitStringKeys = { lb: "lb" };
                result.displayUnit = "lb";
                result.unitString = "lb";
            }
            else {
                result.unitString = "of 10";
            }
            eventObject.result = result;
        }
        return this._eventsDataStore.save(eventObject);
    };
    CareCardEventService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CareCardEventService);
    return CareCardEventService;
}());
exports.CareCardEventService = CareCardEventService;
//# sourceMappingURL=data:application/json;base64,